{"version":3,"sources":["funds/FundCard.js","funds/FundsList.js","funds/Funds.js","utils/utils.js","portfolio/Fund.js","portfolio/Heading.js","portfolio/Portfolio.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["FundCard","props","Card","className","Content","header","fund","fund_name","description","sub_category","extra","Checkbox","label","checked","in_portfolio","onClick","onClickHandler","id","FundsList","funds","map","addOrRemove","Funds","limitFunds","length","slice","useState","filteredFunds","setFilteredFunds","useEffect","debounceFilter","fn","interval","timeout","args","clearTimeout","setTimeout","debounce","searchValue","filter","replace","toLowerCase","includes","Input","placeholder","onChange","p","e","value","fundId","find","fd","setFunds","setPortfolio","to","Button","primary","floated","Fund","changePercent","style","width","percent","amount","Heading","Portfolio","portfolio","getFundAmount","console","log","setPortfolioAmount","Routes","path","App","a","axios","get","data","content","getFunds","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50daf417.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, Checkbox } from 'semantic-ui-react';\n\nconst FundCard = (props) => {\n\n  return (\n    <Card className='margin--std'>\n      <Card.Content header={props.fund.fund_name} />\n      <Card.Content description={props.fund.sub_category} />\n      <Card.Content extra>\n        <Checkbox label='Add to portfolio'\n          checked={props.fund.in_portfolio}\n          onClick={() => props.onClickHandler(props.fund.id)}\n        />\n      </Card.Content>\n    </Card>\n  )\n};\n\nexport default FundCard;\n","import React, { Fragment } from \"react\"\nimport FundCard from \"./FundCard\"\n\nconst FundsList = (props) => {\n  return (\n    <div className='flex-wrap'>\n      {props.funds.map((fund) => (\n        <FundCard fund={fund} onClickHandler={props.addOrRemove}/>\n      ))}\n    </div>\n  )\n}\n\nexport default FundsList;","import React, { useEffect, Fragment, useState } from \"react\";\nimport { Input, Button } from \"semantic-ui-react\";\nimport {\n  Link\n} from \"react-router-dom\";\nimport FundsList from \"./FundsList\";\nimport { debounce } from '../utils/utils';\n\nconst Funds = (props) => {\n\n  const DEFAULT_NO_OF_FUNDS = 6;\n\n  const limitFunds = (funds) => {\n    return funds.length > DEFAULT_NO_OF_FUNDS ?\n      funds.slice(0, DEFAULT_NO_OF_FUNDS)\n      : funds;\n  }\n  const [filteredFunds, setFilteredFunds] = useState(limitFunds(props.funds))\n  useEffect(() => {\n    setFilteredFunds((limitFunds(props.funds)))\n  }, [props.funds]);\n\n  const filterFunds = (searchValue) => {\n    const filterCriteria = (fund) => fund.fund_name.replace(' ', '').toLowerCase().includes(searchValue.replace(' ', '').toLowerCase())\n    const funds = props.funds.filter(filterCriteria);\n    setFilteredFunds(limitFunds(funds))\n  }\n  const debounceFilter = debounce(filterFunds, 500)\n\n  const addOrRemove = (fundId) => {\n    const fund = props.funds.find((fd) => fd.id === fundId)\n    fund.in_portfolio = !fund.in_portfolio\n    props.setFunds(props.funds)\n  }\n\n  return (\n    <Fragment>\n      <Input\n        className='flex'\n        placeholder='Search Mutual funds'\n        onChange={(p, e) => debounceFilter(e.value)}\n      />\n      <FundsList\n        funds={filteredFunds}\n        addOrRemove={addOrRemove}\n        setPortfolio={props.setPortfolio}\n      />\n      <Link to='/portfolio'>\n        <Button primary floated='right'>Next</Button>\n      </Link>\n    </Fragment>\n  );\n};\n\nexport default Funds;","export function debounce(fn, interval) {\n  var timeout = null;\n  return function(...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => fn(...args), interval)\n  }\n}","import React from 'react';\nimport { Input } from 'semantic-ui-react';\n\nconst Fund = ({fund, changePercent}) => {\n  return (\n    <div className='flex'>\n      <span style={{width: '350px'}}>{fund.fund_name }</span>\n      <Input\n        placeholder='percentage'\n        value={fund.percent}\n        onChange={(p, e) => changePercent(fund.id, e.value)}\n      />\n      <span>{fund.amount}</span>\n    </div>\n  )\n}\nexport default Fund;","import React from 'react';\n\nconst Heading = (props) => {\n  return (\n    <div className='flex'>\n      <h4 style={{width: '350px' }}> Fund </h4>\n      <h4>Percentage</h4>\n      <h4> Amount </h4>\n    </div>\n  )\n}\n\nexport default Heading;","import React, { useState, useEffect } from 'react';\nimport { Input } from 'semantic-ui-react';\nimport Fund from './Fund';\nimport Heading from './Heading';\n\nconst Portfolio = (props) => {\n\n  const { portfolio, setPortfolio } = props;\n\n  useEffect(() => {\n    const funds = props.funds.filter((fund) => fund.in_portfolio)\n    setPortfolio({...portfolio, funds });\n  }, []);\n\n  const setPortfolioAmount = (amount) => {\n    const funds = portfolio.funds.map((fund) => (\n      fund.percent ?\n      {...fund, amount: getFundAmount(fund.percent, amount)}\n      : fund\n    ))\n    setPortfolio({ funds, amount });\n  }\n\n  const getFundAmount = (percent, amount) => {\n    console.log('port', percent, amount)\n    return percent/100 * amount;\n  }\n\n  const changePercent = (fundId, percent) => {\n    const funds = portfolio.funds.map((fund) => {\n      if (fund.id === fundId) {\n        let amount = 0;\n        if (portfolio.amount) {\n          amount = getFundAmount(percent, portfolio.amount)\n        }\n        return { ...fund, percent, amount }\n      }\n      return fund;\n    })\n    console.log('fuff', funds)\n    setPortfolio({ ...portfolio, funds })\n  }\n\n\n  return (\n    <div>\n      <div className='flex'>\n        <h2>Total Amount to be invested</h2>\n        <Input placeholder='Amount' onChange={(p, e) => setPortfolioAmount(e.value)} />\n      </div>\n      <Heading />\n      {portfolio.funds.map((fund) => (\n        <Fund fund={fund} changePercent={changePercent}/>\n      ))}\n    </div>\n  )\n};\n\nexport default Portfolio;","import React from 'react';\nimport Funds from './funds/Funds';\nimport Portfolio from './portfolio/Portfolio';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nconst Routes = (props) => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/portfolio\">\n          <Portfolio\n            funds={props.funds}\n            portfolio={props.portfolio}\n            setPortfolio={props.setPortfolio}\n          />\n        </Route>\n        <Route path=\"/\">\n          <Funds\n            setPortfolio={props.setPortfolio}\n            funds={props.funds}\n            setFunds={props.setFunds}\n          />\n        </Route>\n      </Switch>\n    </Router>\n  )\n};\n\nexport default Routes;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Routes from './Routes';\nimport axios from 'axios';\n\nfunction App() {\n\n  const [funds, setFunds] = useState([]);\n\n  const [portfolio, setPortfolio] = useState({\n    funds: [],\n    amount: 0\n  });\n\n  useEffect(() => {\n    getFunds();\n  }, [])\n\n  async function getFunds() {\n    const funds = await axios.get('http://www.mocky.io/v2/5e3415ce3000008900d962b1');\n    setFunds(funds.data.content);\n  }\n\n  return (\n    <Routes\n      funds={funds}\n      setFunds={setFunds}\n      portfolio={portfolio}\n      setPortfolio={setPortfolio}\n    />\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}